User user; // dont touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

/*** control ***/
onEvent("control", "show", "refreshCemeteries()");
onEvent("control", "show", "refreshPlots()");
onEvent("control", "show", "loadPlotAttributes()");
onEvent("control", "show", "loadMarkerAttributes()");
onEvent("control", "show", "loadBurialAttributes()");
onEvent("control", "show", "loadMotifAttributes()");

/*** ArchEnt: Cemetery ***/
onEvent("control/cemetery/CemeteryList", "click", "loadCemetery()");
onEvent("control/cemetery/newCemetery", "click", "newCemetery()");

onEvent("Cemetery/Cemetery_Admin/Update", "delayclick", "saveCemetery()");

onEvent("Cemetery/Cemetery_Plots", "show", "updateAllCemetery()");
onEvent("Cemetery/Cemetery_Plots/newPlot", "click", "newPlot()");
onEvent("Cemetery/Cemetery_Plots/PlotList", "click", "loadPlot()");

String cemetery_id = null;
String site = null;
String date_of_recording = null;

refreshCemeteries() {
    populateList("control/cemetery/CemeteryList", fetchEntityList("Cemetery"));
}

newCemetery(){
    cememtery_id = null;
    newTabGroup("Cemetery");
    setFieldValue("Cemetery/Cemetery_Admin/Date_of_recording", getCurrentTime());
}
loadCemetery() {
    cemetery_id = getListItemValue();
    loadCemeteryFrom(cemetery_id);
}
loadCemeteryFrom(entid) {
    cemetery_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Cemetery", entid);
}

saveCemetery() {
    site = getFieldValue("Cemetery/Cemetery_Admin/Site");
    date_of_recording = getFieldValue("Cemetery/Cemetery_Admin/Date_of_recording");
    if (isNull(getFieldValue("Cemetery/Cemetery_Admin/Site"))) { 
        showWarning("Validation Error", "Cannot save Cemetery without Site");
        showTabGroup("Cemetery");
        return false;
    }
    if (!isNull(cemetery_id)) {
        entity = fetchArchEnt(cemetery_id);
    }
    saveTabGroup("Cemetery", cemetery_id, null, null, "cemetery_id = getLastSavedRecordId();");
}
 
updateAllCemetery(){
    if (!isNull(cemetery_id)){
        plotsInCemetery = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Plot'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+cemetery_id+"\n"+
        "                                                       and relntypeName = 'CemeteryPlot')\n"+
        "                             and uuid != "+cemetery_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateList("Cemetery/Cemetery_Plots/PlotList",  plotsInCemetery);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Cemetery/Cemetery_Plots/PlotList",  empty);
    }
}

/*** ArchEnt: Plot ***/
onEvent("control/plot/PlotList", "click", "loadPlot()");

onEvent("Plot/Admin/attachPhoto", "delayclick", "attachPictureTo(\"Plot/Admin/Photo\")");

onEvent("Plot/Admin/Update", "delayclick", "savePlot()");
onEvent("Plot/Historical_info/Update", "delayclick", "savePlot()");
onEvent("Plot/Plot/Update", "delayclick", "savePlot()");

onEvent("Plot/Plot", "show", "updateAllPlotBurials()");
onEvent("Plot/Plot/newBurial", "click", "newBurial()");
onEvent("Plot/Plot/showBurial", "click", "showBurial()");

onEvent("Plot/Marker", "show", "updateAllPlotMarkers()");
onEvent("Plot/Marker/newMarker", "click", "newMarker()");
onEvent("Plot/Marker/MarkerList", "click", "loadMarker()");

onEvent("Plot/Associated_plots", "show", "refreshAssociatedPlots()" );
onEvent("Plot/Associated_plots/AddPlot", "delayclick", "makePlotPlotReln()");
onEvent("Plot/Associated_plots/ShowPlot", "click", "showPlot()");
onEvent("Plot/Associated_plots/RemovePlot", "delayclick", "removePlotPlotReln()");

String plot_id = null;
String new_plot_id = null;

refreshPlots() {
    populateList("control/plot/PlotList", fetchEntityList("Plot"));
}

newPlot(){
    plot_id = null;
    newTabGroup("Plot");
    saveCemetery();
    setFieldValue("Plot/Admin/Site", site);
    setFieldValue("Plot/Admin/Date", date_of_recording);
}

loadPlot() {
    plot_id = getListItemValue();
    loadPlotFrom(plot_id);
}
loadPlotFrom(entid) {
    plot_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Plot", entid);
}

savePlot() {
    if (isNull(getFieldValue("Plot/Admin/Grave_number"))){ 
        showWarning("Validation Error", "Cannot save Plot without Grave Number");
        showTabGroup("Plot");
        return false;
    }
    
    if (!isNull(plot_id)) {
        entity = fetchArchEnt(plot_id);
    }
    saveTabGroup("Plot", plot_id, null, null, "makeCemeteryPlotReln();");  
}

makeCemeteryPlotReln() {
    plot_id = getLastSavedRecordId(); 
    if (isNull(cemetery_id)) {
        cemetery_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Cemetery'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+plot_id+"\n"+
        "                                                       and relntypeName = 'CemeteryPlot')\n"+
        "                             and uuid != "+plot_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;").get(0);
        if(isNull(cemetery_id)) {
            return;
        }
    }
    saveEntitiesToRel("CemeteryPlot", cemetery_id, plot_id);
    refreshAssociatedPlots();
}

loadPlotAttributes(){
    populateDropDown("Plot/Admin/Orientation", makeVocab("Orientation"));
    populateCheckBoxGroup("Plot/Historical_info/Denomination", makeVocab("Denomination"));
    populateCheckBoxGroup("Plot/Historical_info/Sources", makeVocab("Sources"));
    populateDropDown("Plot/Plot/Plot_type", makeVocab("Plot type"));
    populateDropDown("Plot/Plot/Fence", makeVocab("Fence"));
    populateCheckBoxGroup("Plot/Plot/Other_items", makeVocab("Other items"));
    populateDropDown("Plot/Plot/Plot_type", makeVocab("Plot type"));
}

updateAllPlotBurials(){
    if(fetchPrimaryBurial() == false) {
        setFieldValue("Plot/Plot/Primary_burial", "N/A");
        setFieldValue("Plot/Plot/Date_of_death", "N/A");
    } else {
        setFieldValue("Plot/Plot/Primary_burial", primaryBurialName);
        setFieldValue("Plot/Plot/Date_of_death", primaryBurialDate);
    }
    if (!isNull(plot_id)){
        burialsInPlot = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Burial'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+plot_id+"\n"+
        "                                                       and relntypeName = 'PlotBurial')\n"+
        "                             and uuid != "+plot_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        print(burialsInPlot);
        populateDropDown("Plot/Plot/BurialList",  burialsInPlot);
    } else {
        Object empty = fetchAll("select '', '';");
        populateDropDown("Plot/Plot/BurialList",  empty);
    }
}

updateAllPlotMarkers(){
    if (!isNull(plot_id)){
        markersInPlot = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Marker'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+plot_id+"\n"+
        "                                                       and relntypeName = 'PlotMarker')\n"+
        "                             and uuid != "+plot_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        print(markersInPlot);
        populateList("Plot/Marker/MarkerList",  markersInPlot);
    } else {
        Object empty = fetchAll("select '', '';");
        print(empty);
        populateList("Plot/Marker/MarkerList",  empty);
    }
}

makePlotPlotReln(){
    new_plot_id = getFieldValue("Plot/Associated_plots/Associate_plot");

    if(isNull(new_plot_id)){ 
        showToast("Please select a plot to associate");
        return;
    } else {
        if(isNull(plot_id)) {
            showToast("Saving plot. Please click on Add Plot again.");
            savePlot();
            return;
        } else {
            saveEntitiesToRel("PlotPlot", plot_id, new_plot_id);
            refreshAssociatedPlots();
        }
    }
}

refreshAssociatedPlots(){
    plotsNotRelatedToPlot = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp " +
    "      FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename " +
    "                FROM latestNonDeletedArchentIdentifiers " +
    "               WHERE aenttypename = 'Plot' " +
    "                 AND uuid != "+plot_id+" " +
    "                 AND uuid not in (select uuid " +
    "                                FROM latestNonDeletedAentReln " +
    "                               where relationshipid in (select relationshipid " +
    "                                                          FROM latestNonDeletedAentReln " +
    "                                                          JOIN relationship using (relationshipid) " +
    "                                                          JOIN relntype using (relntypeid) " +
    "                                                         where uuid = "+plot_id+" " +
    "                                                           and relntypeName = 'PlotPlot') " +
    "                                 )                      " +
    "            ORDER BY uuid, attributename ASC) " +
    "    group by uuid " +
    "    order by valuetimestamp desc, uuid, attributename; ");
    populateDropDown("Plot/Associated_plots/Associate_plot", plotsNotRelatedToPlot);

    if (!isNull(plot_id)){
        plotInPlot = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Plot'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+plot_id+"\n"+
        "                                                       and relntypeName = 'PlotPlot')\n"+
        "                             and uuid != "+plot_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateDropDown("Plot/Associated_plots/Associated_plots",  plotInPlot);
    } else {
        Object empty = fetchAll("select '', '';");
        populateDropDown("Plot/Associated_plots/Associated_plots",  empty);
    }
}

showPlot(){
    plot_id = getFieldValue("Plot/Associated_plots/Associated_plots");
    if(isNull(plot_id)) {
        showToast("Please select a an associated plot to show");
        return;
    } else {
        loadPlotFrom(plot_id);
    }
}

removePlotPlotReln() {
    new_plot_id = getFieldValue("Plot/Associated_plots/Associated_plots");
    if(isNull(new_plot_id)) {
        showToast("Please select an associated plot to remove");
        return;
    } else {
        relnToDelete =  fetchAll("select distinct relationshipid " +
        "from latestNonDeletedAentReln a join latestnondeletedRelationship using (relationshipid) " +
        "join relntype using (relntypeid) join latestNonDeletedAentReln b using (relationshipid) where relntypename = 'PlotPlot' and a.uuid != b.uuid and a.uuid = "+ plot_id +" and b.uuid = "+ new_plot_id + ";"); 

        for(int i =0; i < relnToDelete.size(); i++){
            String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '"+userid+"' from latestnondeletedaentreln where relationshipid = '"+relnToDelete.get(i).get(0)+"';";
            fetchOne(query);
            deleteRel(relnToDelete.get(i).get(0));
        }
        refreshAssociatedPlots();
    }
}


/*** ArchEnt: Marker ***/
onEvent("Marker/Motif", "show", "updateAllMarkerMotifs()");
onEvent("Marker/Motif/newMotif", "click", "newMotif()");
onEvent("Marker/Motif/MotifList", "click", "loadMotif()");

onEvent("Marker/Marker/attachShape", "click", "attachFileTo(\"Marker/Marker/Shape\")");
onEvent("Marker/Marker/viewAttached", "click", "viewArchEntAttachedFiles(marker_id)");

onEvent("Marker/Marker/Update", "delayclick", "saveMarker();");
onEvent("Marker/Inscription/Update", "delayclick", "saveMarker();");

loadMarkerAttributes(){
    populateCheckBoxGroup("Marker/Marker/Form", makeVocab("Form"));
    populateCheckBoxGroup("Marker/Marker/Marker_colour", makeVocab("Marker colour"));
    populateCheckBoxGroup("Marker/Marker/Material", makeVocab("Material"));
    populateDropDown("Marker/Marker/Lettering", makeVocab("Lettering"));
    populateRadioGroup("Marker/Marker/Footstone", makeVocab("Footstone"));
    populateCheckBoxGroup("Marker/Inscription/Style_of_language", makeVocab("Style of language"));
    populateCheckBoxGroup("Marker/Inscription/Key_words", makeVocab("Key words"));
    populateCheckBoxGroup("Marker/Inscription/Tense", makeVocab("Tense"));
    populateCheckBoxGroup("Marker/Inscription/Author", makeVocab("Author"));
    populateCheckBoxGroup("Marker/Inscription/Burials_described_in_relation_to", makeVocab("Burials described in relation to"));
}

String marker_id = null;

newMarker(){
    marker_id = null;
    newTabGroup("Marker");
    savePlot();
}

loadMarker() {
    marker_id = getListItemValue();
    loadMarkerFrom(marker_id);
}

loadMarkerFrom(entid) {
    marker_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Marker", entid);
}

saveMarker() {
    if (isNull(getFieldValue("Marker/Marker/Form")) && isNull(getFieldValue("Marker/Marker/Material")) && isNull(getFieldValue("Marker/Inscription/Inscription"))){ 
        showWarning("Validation Error", "Cannot save Marker without Form, Material or Inscription");
        showTabGroup("Marker");
        return false;
    }
    
    if (!isNull(marker_id)) {
        entity = fetchArchEnt(marker_id);
    }
    // first null is map data
    saveTabGroup("Marker", marker_id, null, null, "makePlotMarkerReln();");
}

makePlotMarkerReln() {
    marker_id = getLastSavedRecordId(); 
    if (isNull(plot_id)) {
        plot_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Plot'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+marker_id+"\n"+
        "                                                       and relntypeName = 'PlotMarker')\n"+
        "                             and uuid != "+marker_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
    }
    saveEntitiesToRel("PlotMarker", marker_id, plot_id);
}

updateAllMarkerMotifs(){
    if (!isNull(marker_id)){
        motifInMarker = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Motif'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+marker_id+"\n"+
        "                                                       and relntypeName = 'MarkerMotif')\n"+
        "                             and uuid != "+marker_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateList("Marker/Motif/MotifList",  motifInMarker);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Marker/Motif/MotifList",  empty);

    }
}
/** ArchEnt: Motif **/
onEvent("Motif/Motif/Update_and_new", "delayclick", "saveAndNewMotif();");
onEvent("Motif/Motif/Update_and_close", "delayclick", "saveMotif();showTabGroup(\"Marker\", marker_id)");
onEvent("Motif/Motif/Remove", "delayclick", "removeMotif();");

loadMotifAttributes() {
    populateHierarchicalPictureGallery("Motif/Motif/Motif", "Motif");
    populateDropDown("Motif/Motif/Location", makeVocab("Location"));
}

String motif_id = null;
String new_motif_id = null;

newMotif(){
    motif_id = null;
    newTabGroup("Motif");
    saveMarker();
}

loadMotif() {
    motif_id = getListItemValue();
    loadMotifFrom(motif_id);
}

loadMotifFrom(entid) {
    motif_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Motif", entid);
}

saveMotif() {
    if (isNull(getFieldValue("Motif/Motif/Motif"))){ 
        showWarning("Validation Error", "Cannot save Motif without a Motif");
        showTabGroup("Motif");
        return false;
    }
    
    if (!isNull(motif_id)) {
        entity = fetchArchEnt(motif_id);
    }
    // first null is map data
    saveTabGroup("Motif", motif_id, null, null, "makeMarkerMotifReln();");
}

saveAndNewMotif(){
    if (isNull(getFieldValue("Motif/Motif/Motif"))){ 
        showWarning("Validation Error", "Cannot save Motif without a Motif");
        showTabGroup("Motif");
        return false;
    }
    
    if (!isNull(motif_id)) {
        entity = fetchArchEnt(motif_id);
    }
    // first null is map data
    saveTabGroup("Motif", motif_id, null, null, "makeMarkerMotifReln();newMotif();");
}

makeMarkerMotifReln() {
    motif_id = getLastSavedRecordId(); 
    if (isNull(marker_id)) {
        marker_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Marker'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+motif_id+"\n"+
        "                                                       and relntypeName = 'MarkerMotif')\n"+
        "                             and uuid != "+motif_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
    }
    saveEntitiesToRel("MarkerMotif", marker_id, motif_id);
}

removeMotif() {
    if(isNull(motif_id)) {
        showTabGroup("Marker", marker_id);
        return;
    }
    removeMarkerMotifReln();
}

removeMarkerMotifReln() {
    if(!isNull(marker_id)) {
        relnToDelete =  fetchAll("select distinct relationshipid " +
        "from latestNonDeletedAentReln a join latestnondeletedRelationship using (relationshipid) " +
        "join relntype using (relntypeid) join latestNonDeletedAentReln b using (relationshipid) where relntypename = 'MarkerMotif' and a.uuid != b.uuid and a.uuid = "+ marker_id +" and b.uuid = "+ motif_id + ";"); 

        for(int i =0; i < relnToDelete.size(); i++){
            String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '"+userid+"' from latestnondeletedaentreln where relationshipid = '"+relnToDelete.get(i).get(0)+"';";
            fetchOne(query);
            deleteRel(relnToDelete.get(i).get(0));
        }
        updateAllMarkerMotifs();
    }
    showTabGroup("Marker", marker_id);
}

/*** ArchEnt: Burial ***/
onEvent("Burial/Burial/Update", "delayclick", "saveBurial()");

loadBurialAttributes() {
    populateRadioGroup("Burial/Burial/Is_primary_burial", makeVocab("Is primary burial"));
}

String burial_id = null;
String primaryBurialID = null;
String primaryBurialName = null;
String primaryBurialDate = null;

newBurial(){
    burial_id = null;
    newTabGroup("Burial");
    savePlot();
}

loadBurial() {
    burial_id = getListItemValue();
    loadBurialFrom(burial_id);
}

loadBurialFrom(entid) {
    burial_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Burial", entid);
}

showBurial() {
    burial_id = getFieldValue("Plot/Plot/BurialList");
    if(isNull(burial_id)) {
        showToast("Please select a burial from the drop down");
    }
    loadBurialFrom(burial_id);
}

fetchPrimaryBurial() {
    if(!isNull(plot_id)) {
        List primaryBurial = fetchAll(""+
        "select distinct uuid, freetext, attributename, relationshipid "+
        "       from latestnondeletedaentvalue join attributekey using (attributeid)  "+
        "       join latestnondeletedaentreln using (uuid) "+
        "      where uuid in (select uuid  "+
        "                       from latestnondeletedaentvalue  "+
        "                      where vocabid = (select vocabid  "+
        "                                         from vocabulary  "+
        "                                         join attributekey using (attributeid)  "+
        "                                        where attributeName = 'Is primary burial'  "+
        "                                          and vocabname = 'Yes') "+
        "                      )  "+
        "      and uuid in (select uuid  "+
        "                     from latestnondeletedaentreln "+
        "                    where relationshipid in (select relationshipid  "+
        "                                               from latestnondeletedaentreln "+
        "                                              where uuid = "+ plot_id +") "+
        "                   ) "+
        "         and (attributename = 'Name' "+
        "              or attributename = 'Date of death') "+
        "    order by attributename desc;");
        if(isNull(primaryBurial)) {
            primaryBurialID = null;
            primaryBurialName = null;
            primaryBurialDate =  null;
            return false;
        }
        print(primaryBurial);
        primaryBurialID = primaryBurial.get(0).get(0);
        primaryBurialName = primaryBurial.get(0).get(1);
        primaryBurialDate = primaryBurial.get(1).get(1);
        return true;
    } else {
        primaryBurialID = null;
        primaryBurialName = null;
        primaryBurialDate =  null;
        return false;       
    }
}

saveBurial() {
    if (isNull(getFieldValue("Burial/Burial/Name"))){ 
        showWarning("Validation Error", "Cannot save Burial without Name");
        return false;
    }
    if(getFieldValue("Burial/Burial/Is_primary_burial").equals(findVocabID("Is primary burial", "Yes"))){
        if(fetchPrimaryBurial() == true && !primaryBurialID.equals(burial_id)) {
            showWarning("Validation Error", "You can only have one primary burial per plot");
            return;
        }
    }
    if (!isNull(burial_id)) {
        entity = fetchArchEnt(burial_id);
    }
    // first null is map data
    saveTabGroup("Burial", burial_id, null, null, "makePlotBurialReln();");
}

makePlotBurialReln() {
    burial_id = getLastSavedRecordId(); 
    if (isNull(plot_id)) {
        plot_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Plot'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+burial_id+"\n"+
        "                                                       and relntypeName = 'PlotBurial')\n"+
        "                             and uuid != "+burial_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
    }
    saveEntitiesToRel("PlotBurial", burial_id, plot_id);
}

// MISC FUNCTIONS    
saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

findVocabID(String attribName, String vocabName) {
    String a = fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributeName = '" + attribName + "' and vocabname = '" + vocabName + "';").get(0);
    return a;
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");