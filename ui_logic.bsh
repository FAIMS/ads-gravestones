User user; // dont touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

/*** control ***/
onEvent("control", "show", "refreshCemeteries()");
onEvent("control", "show", "refreshPlots()");
onEvent("control", "show", "loadPlotAttributes()");

/*** ArchEnt: Cemetery ***/
onEvent("control/cemetery/CemeteryList", "click", "loadCemetery()");
onEvent("control/cemetery/newCemetery", "click", "newCemetery()");

onEvent("Cemetery/Cemetery_Admin/Update", "click", "saveCemetery()");

onEvent("Cemetery/Cemetery_Plots", "show", "updateAllCemetery()");
onEvent("Cemetery/Cemetery_Plots/newPlot", "click", "newPlot()");
onEvent("Cemetery/Cemetery_Plots/PlotList", "click", "loadPlot()");

String cemetery_id = null;

refreshCemeteries() {
    populateList("control/cemetery/CemeteryList", fetchEntityList("Cemetery"));
}

newCemetery(){
    cememtery_id = null;
    newTabGroup("Cemetery");
}
loadCemetery() {
    cemetery_id = getListItemValue();
    loadCemeteryFrom(cemetery_id);
}
loadCemeteryFrom(entid) {
    cemetery_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Cemetery", entid);    
}

saveCemetery() {
    if (false) { 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(cemetery_id)) {
        entity = fetchArchEnt(cemetery_id);
    }
    saveTabGroup("Cemetery", cemetery_id, null, null, "cemetery_id = getLastSavedRecordId();");
}
 
updateAllCemetery(){
    if (!isNull(cemetery_id)){
        plotsInCemetery = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Plot'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+cemetery_id+"\n"+
        "                                                       and relntypeName = 'CemeteryPlot')\n"+
        "                             and uuid != "+cemetery_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateList("Cemetery/Cemetery_Plots/PlotList",  plotsInCemetery);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Cemetery/Cemetery_Plots/PlotList",  empty);
    }
}

/*** ArchEnt: Plot ***/
onEvent("control/plot/GraveList", "click", "loadPlot()");

onEvent("Grave/Grave/attachPhoto", "click", "attachPictureTo(\"Grave/Grave/Photo\")");
onEvent("Grave/Grave/attachShape", "click", "attachFileTo(\"Grave/Grave/Shape\")");
onEvent("Grave/Grave/viewattached", "click", "viewArchEntAttachedFiles(grave_id)");

onEvent("Grave/Grave/Update", "delayclick", "saveGrave()");
onEvent("Grave/Monument/Update", "delayclick", "saveGrave()");
onEvent("Grave/Motif/Update", "delayclick", "saveGrave()");
onEvent("Grave/Inscription/Update", "delayclick", "saveGrave()");

onEvent("Grave/Plots", "show", "updateAllGrave()");
onEvent("Grave/Plots/newBurial", "click", "newBurial()");
onEvent("Grave/Plots/BurialList", "click", "loadBurial()");

onEvent("Grave/Associated_Plots", "show", "refreshAssociatedPlots()" );
onEvent("Grave/Associated_Plots/AddPlot", "delayclick", "makeGraveGraveReln()");
onEvent("Grave/Associated_Plots/ShowPlot", "click", "showPlot()");
onEvent("Grave/Associated_Plots/RemovePlot", "delayclick", "removePlotReln()");

String plot_id = null;
String new_plot_id = null;

refreshPlots() {
    populateList("control/plot/PlotList", fetchEntityList("Plot"));
}

newPlot(){
    plot_id = null;
    newTabGroup("Plot");
    saveCemetery();
}

loadPlot() {
    plot_id = getListItemValue();
    loadPlotFrom(plot_id);
}
loadPlotFrom(entid) {
    plot_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Plot", entid);
}

savePlot() {

    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(plot_id)) {
        entity = fetchArchEnt(plot_id);
    }
    saveTabGroup("Plot", plot_id, null, null, "makeCemeteryPlotReln();");  
}

makeCemeteryPlotReln() {
    plot_id = getLastSavedRecordId(); 
    if (isNull(cemetery_id)) {
        cemetery_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Cemetery'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+plot_id+"\n"+
        "                                                       and relntypeName = 'CemeteryPlot')\n"+
        "                             and uuid != "+plot_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;").get(0);
        if(isNull(cemetery_id)) {
            showToast("This is bad");
            return;
        }
    }
    saveEntitiesToRel("CemeteryPlot", cemetery_id, plot_id);

    refreshAssociatedPlots();
}

loadPlotAttributes(){
    populateCheckBoxGroup("Marker/Marker/Form", makeVocab("Form"));
    populateCheckBoxGroup("Plot/Admin/Orientation", makeVocab("Orientation"));
    populateCheckBoxGroup("Marker/Marker/Marker_Colour", makeVocab("Marker colour"));
    populateCheckBoxGroup("Grave/Monument/Material", makeVocab("Material"));
    populateCheckBoxGroup("Grave/Monument/Fence", makeVocab("Fence"));
    populateCheckBoxGroup("Grave/Monument/Lettering", makeVocab("Lettering"));
    populateCheckBoxGroup("Grave/Monument/Footstone", makeVocab("Footstone"));
    populateCheckBoxGroup("Grave/Monument/Other_items", makeVocab("Other items"));
    populateCheckBoxGroup("Grave/Motif/Motif", makeVocab("Motif"));
    populateCheckBoxGroup("Grave/Inscription/Style_of_language", makeVocab("Style of language"));
    populateCheckBoxGroup("Grave/Inscription/Key_words", makeVocab("Key words"));
    populateCheckBoxGroup("Grave/Inscription/Tense", makeVocab("Tense"));
    populateCheckBoxGroup("Grave/Inscription/Burials_described_in_relation_to", makeVocab("Burials described in relation to"));
    populateDropDown("Grave/Plots/Plot_type", makeVocab("Plot type"));
}

updateAllGrave(){
    showToast("I'm happy");
    if (!isNull(grave_id)){
        burialsInGrave = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Burial'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+grave_id+"\n"+
        "                                                       and relntypeName = 'GraveBurial')\n"+
        "                             and uuid != "+grave_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        print(burialsInGrave);
        populateList("Grave/Plots/BurialList",  burialsInGrave);
    } else {
        showToast("grave empty... beware undead");
        Object empty = fetchAll("select '', '';");
        populateList("Grave/Plots/BurialList",  empty);

    }
}    

makePlotPlotReln(){
    new_plot_id = getFieldValue("Grave/Associated_Plots/Associate_plot");

    if(isNull(new_plot_id)){ 
        showToast("Please select a plot to associate");
        return;
    } else {
        if(isNull(plot_id)) {
            showToast("Saving plot. Please click on Add Plot again.");
            savePlot();
            return;
        } else {
            saveEntitiesToRel("PlotPlot", plot_id, new_plot_id);
            refreshAssociatedPlots();
        }
    }
}

refreshAssociatedPlots(){
    gravesNotRelatedToGrave = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp " +
    "      FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename " +
    "                FROM latestNonDeletedArchentIdentifiers " +
    "               WHERE aenttypename = 'Grave' " +
    "                 AND uuid != "+grave_id+" " +
    "                 AND uuid not in (select uuid " +
    "                                FROM latestNonDeletedAentReln " +
    "                               where relationshipid in (select relationshipid " +
    "                                                          FROM latestNonDeletedAentReln " +
    "                                                          JOIN relationship using (relationshipid) " +
    "                                                          JOIN relntype using (relntypeid) " +
    "                                                         where uuid = "+grave_id+" " +
    "                                                           and relntypeName = 'GraveGrave') " +
    "                                 )                      " +
    "            ORDER BY uuid, attributename ASC) " +
    "    group by uuid " +
    "    order by valuetimestamp desc, uuid, attributename; ");
    populateDropDown("Grave/Associated_Plots/Associate_plot", gravesNotRelatedToGrave);

    if (!isNull(grave_id)){
        graveInGrave = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Grave'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+grave_id+"\n"+
        "                                                       and relntypeName = 'GraveGrave')\n"+
        "                             and uuid != "+grave_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateDropDown("Grave/Associated_Plots/Associated_Plots",  graveInGrave);
    } else {
        Object empty = fetchAll("select '', '';");
        populateDropDown("Grave/Associated_Plots/Associated_Plots",  empty);
    }
}

showPlot(){
    plot_id = getFieldValue("Grave/Associated_Plots/Associated_Plots");
    if(isNull(plot_id)) {
        showToast("Please select a an associated plot to show");
        return;
    } else {
        loadPlotFrom(plot_id);
    }
}

removePlotReln() {
    new_grave_id = getFieldValue("Grave/Associated_Plots/Associated_Plots");
    if(isNull(new_grave_id)) {
        showToast("Please select an associated plot to remove");
        return;
    } else {
        relnToDelete =  fetchAll("select distinct relationshipid " +
        "from latestNonDeletedAentReln a join latestnondeletedRelationship using (relationshipid) " +
        "join relntype using (relntypeid) join latestNonDeletedAentReln b using (relationshipid) where relntypename = 'GraveGrave' and a.uuid != b.uuid and a.uuid = "+ grave_id +" and b.uuid = "+ new_grave_id + ";"); 

        for(int i =0; i < relnToDelete.size(); i++){
            String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '"+userid+"' from latestnondeletedaentreln where relationshipid = '"+relnToDelete.get(i).get(0)+"';";
            fetchOne(query);
            deleteRel(relnToDelete.get(i).get(0));
        }
        refreshAssociatedPlots();
    }
}

/*** ArchEnt: Burial ***/

onEvent("Burial/Burial/Update", "delayclick", "saveBurial()");

String burial_id = null;

newBurial(){
    burial_id = null;
    newTabGroup("Burial");
    saveGrave();
}

loadBurial() {
    burial_id = getListItemValue();
    loadBurialFrom(burial_id);
}

loadBurialFrom(entid) {
    burial_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Burial", entid);
}

saveBurial() {
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(burial_id)) {
        entity = fetchArchEnt(burial_id);
    }
    // first null is map data
    saveTabGroup("Burial", burial_id, null, null, "makeGraveBurialReln();");
}

makeGraveBurialReln() {
    burial_id = getLastSavedRecordId(); 
    if (isNull(grave_id)) {
        grave_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Grave'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+burial_id+"\n"+
        "                                                       and relntypeName = 'GraveBurial')\n"+
        "                             and uuid != "+burial_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
    }
    saveEntitiesToRel("GraveBurial", burial_id, grave_id);
}

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");