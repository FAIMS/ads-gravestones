    
/****** 
 FAIMS Logic Fail generated by Heurist Vsn 3.1.7, Friday 14th of February 2014 10:38:29 AM
 Database: hdb_alice_stonetools   Heurist user:Alice Buhrich
 ******/

User user; // dont touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

showWarning("Thanks for trying this module!", "We have provided this module for Demonstration purposes only. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

/*** control ***/
onEvent("control", "show", "refreshCollections()");
onEvent("control", "show", "refreshArtefacts()");
onEvent("control", "show", "refreshReports()");
onEvent("control", "show", "loadCollectionAttributes()");
onEvent("control", "show", "loadArtefactAttributes()");
onEvent("control", "show", "loadReportAttributes()");

/*** ArchEnt: Collection ***/
onEvent("control/collection/CollectionList", "click", "loadCollection()");
onEvent("control/collection/newCollection", "click", "newCollection()");

onEvent("Collection/Collection_GeneralInformation/Update", "delayclick", "saveCollection()");

onEvent("Collection/Collection_Location/attachThumbnail_image", "click", "attachPictureTo(\"Collection/Collection_Location/Thumbnail_image\")");
onEvent("Collection/Collection_Location/Update", "delayclick", "saveCollection()");

onEvent("Collection/Collection_Owner/Update", "delayclick", "saveCollection()");

onEvent("Collection/Collection_Artefacts", "show", "updateAllCollection()");
onEvent("Collection/Collection_Artefacts/newArtefact", "click", "newArtefact()");
onEvent("Collection/Collection_Artefacts/ArtefactList", "click", "loadArtefact()");

String collection_id = null;

refreshCollections() {
    populateList("control/collection/CollectionList", fetchEntityList("Collection"));
}

newCollection(){
    collection_id = null;
    newTabGroup("Collection");
    loadCollectionAttributes();
}
loadCollection() {
    collection_id = getListItemValue();
    loadCollectionFrom(collection_id);
}
loadCollectionFrom(entid) {
    collection_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Collection", entid);    
}

saveCollection() {
    if (false) { 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(collection_id)) {
        entity = fetchArchEnt(collection_id);
    }
    // first null is map data
    saveTabGroup("Collection", collection_id, null, null, "collection_id = getLastSavedRecordId();");
}
 
loadCollectionAttributes() {
    populateDropDown("Collection/Collection_GeneralInformation/Identity", makeVocab("Identity"));
}

updateAllCollection(){
    if (!isNull(collection_id)){
        artefactsInCollection = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Artefact'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+collection_id+"\n"+
        "                                                       and relntypeName = 'CollectionArtefact')\n"+
        "                             and uuid != "+collection_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        print(artefactsInCollection);
        populateList("Collection/Collection_Artefacts/ArtefactList",  artefactsInCollection);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Collection/Collection_Artefacts/ArtefactList",  empty);

    }
}

/*** ArchEnt: Artefact ***/
onEvent("Artefact", "show", "hideTabs();showTabCustom();");
onEvent("control/artefact/ArtefactList", "click", "loadArtefact()");

onEvent("Artefact/Artefact_Description/Artefact_Classification", "click", "showTabCustom()");

onEvent("Artefact/Artefact_Visual_interptretation/attachPhoto", "click", "attachPictureTo(\"Artefact/Artefact_Visual_interptretation/Photo\")");
onEvent("Artefact/Artefact_Visual_interptretation/attachDrawing", "click", "attachFileTo(\"Artefact/Artefact_Visual_interptretation/Drawing\")");
onEvent("Artefact/Artefact_Visual_interptretation/viewattached", "click", "viewArchEntAttachedFiles(artefact_id)");
onEvent("Artefact/Artefact_Visual_interptretation/Update", "delayclick", "saveArtefact()");

onEvent("Artefact/Artefact_Description/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Provenance/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Preservation/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Morah/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Ooyurka_attributes/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Axe_attributes/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Pebble_attributes/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Attributes_other/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Nut_cracking_rock/Update", "delayclick", "saveArtefact()");

onEvent("Artefact/Artefact_Report", "show", "updateAllArtefact()");
onEvent("Artefact/Artefact_Report/newReport", "click", "newReport()");
onEvent("Artefact/Artefact_Report/ReportList", "click", "loadReport()");

String artefact_id = null;

refreshArtefacts() {
    populateList("control/artefact/ArtefactList", fetchEntityList("Artefact"));
}

hideTabs(){
    cancelTab("Artefact/Artefact_Pebble_attributes", false);
    cancelTab("Artefact/Artefact_Axe_attributes", false);
    cancelTab("Artefact/Artefact_Ooyurka_attributes", false);
    cancelTab("Artefact/Artefact_Morah", false);
    cancelTab("Artefact/Artefact_Attributes_other", false);
    cancelTab("Artefact/Artefact_Nut_cracking_rock", false);
}

showTabCustom(){
    Object values = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("Artefact/Artefact_Description/Artefact_Classification")+"';");   
    String art_type = values.get(0);
    if(art_type.equals("{Axe}")){
        showTab("Artefact/Artefact_Axe_attributes");
    } else if (art_type.equals("{Ooyurka}")) {
        showTab("Artefact/Artefact_Ooyurka_attributes");
    } else if ( art_type.equals("{Pestle_other}")){
        showTab("Artefact/Artefact_Pebble_attributes");
    } else if ( art_type.equals("{Morah}")){
        showTab("Artefact/Artefact_Morah");
    } else if ( art_type.equals("{Nut_cracking_rock}")){
        showTab("Artefact/Artefact_Nut_cracking_rock");
    } else if ( art_type.equals("{Other_(describe)}")){
        showTab("Artefact/Artefact_Attributes_other");
    } else if ( art_type.equals("{Multiple_Uses}")){
        showTab("Artefact/Artefact_Pebble_attributes");
        showTab("Artefact/Artefact_Axe_attributes");
        showTab("Artefact/Artefact_Ooyurka_attributes");
        showTab("Artefact/Artefact_Morah");
        showTab("Artefact/Artefact_Attributes_other");
        showTab("Artefact/Artefact_Nut_cracking_rock");
    }
    showTab("Artefact/Artefact_Description");
}

newArtefact(){
    artefact_id = null;
    newTabGroup("Artefact");
    saveCollection();
}

loadArtefact() {
    artefact_id = getListItemValue();
    loadArtefactFrom(artefact_id);
}
loadArtefactFrom(entid) {
    artefact_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Artefact", entid);
}

saveArtefact() {
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(artefact_id)) {
        entity = fetchArchEnt(artefact_id);
    }
    // first null is map data
    saveTabGroup("Artefact", artefact_id, null, null, "makeCollectionArtefactReln();");  
}

makeCollectionArtefactReln() {
    artefact_id = getLastSavedRecordId(); 
    if (isNull(collection_id)) {
        colleciton_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Collection'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+artefact_id+"\n"+
        "                                                       and relntypeName = 'CollecitonArtefact')\n"+
        "                             and uuid != "+artefact_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
    }
    saveEntitiesToRel("CollectionArtefact", artefact_id, collection_id);
}

loadArtefactAttributes(){
    populateDropDown("Artefact/Artefact_Description/Artefact_Classification", makeVocab("Artefact Classification"));
    populateRadioGroup("Artefact/Artefact_Description/Completeness", makeVocab("Completeness"));
    populateDropDown("Artefact/Artefact_Description/Raw_material", makeVocab("Raw material"));
    populateRadioGroup("Artefact/Artefact_Description/Location_of_raw_material", makeVocab("Location of raw material"));
    populateDropDown("Artefact/Artefact_Axe_attributes/Axe_head_shape", makeVocab("Axe head shape"));
    populateDropDown("Artefact/Artefact_Axe_attributes/Ground_edge_", makeVocab("Ground edge"));
    populateDropDown("Artefact/Artefact_Ooyurka_attributes/Shape_", makeVocab("Shape"));
    populateRadioGroup("Artefact/Artefact_Ooyurka_attributes/Base", makeVocab("Base"));
    populateRadioGroup("Artefact/Artefact_Ooyurka_attributes/Symmetry", makeVocab("Symmetry"));
    populateRadioGroup("Artefact/Artefact_Nut_cracking_rock/Portablility", makeVocab("Portablility"));
    populateCheckBoxGroup("Artefact/Artefact_Pebble_attributes/Pebble_attributes", makeVocab("Pebble attributes"));
    populateCheckBoxGroup("Artefact/Artefact_Attributes_other/Attributes", makeVocab("Attributes"));
    populateDropDown("Artefact/Artefact_Provenance/Activity", makeVocab("Activity"));
    populateDropDown("Artefact/Artefact_Provenance/Locality", makeVocab("Locality"));
    populateDropDown("Artefact/Artefact_Provenance/Landform_where_found", makeVocab("Landform where found"));
    populateDropDown("Artefact/Artefact_Provenance/Geological_substrate", makeVocab("Geological substrate"));
    populateRadioGroup("Artefact/Artefact_Preservation/Condition_of_object", makeVocab("Condition of object"));
    populateDropDown("Artefact/Artefact_Preservation/How_is_the_item_stored", makeVocab("How is the item stored"));
}

updateAllArtefact(){
    if (!isNull(artefact_id)){
        reportsInArtefact= fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Report'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+artefact_id+"\n"+
        "                                                       and relntypeName = 'ArtefactReport')\n"+
        "                             and uuid != "+artefact_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateList("Artefact/Artefact_Report/ReportList",  reportsInArtefact);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Artefact/Artefact_Report/ReportList",  empty);

    }
}      

/*** ArchEnt: Report ***/


onEvent("control/report/ReportList", "click", "loadReport()");
onEvent("Report/Report/Update", "delayclick", "saveReport()");

String report_id = null;

refreshReports() {
    populateList("control/report/ReportList", fetchEntityList("Report"));
}

newReport(){
    report_id = null;
    newTabGroup("Report");
    saveArtefact();
}

loadReport() {
    report_id = getListItemValue();
    loadReportFrom(report_id);
}

loadReportFrom(entid) {
    report_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Report", entid);
}

saveReport() {
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(report_id)) {
        entity = fetchArchEnt(report_id);
    }
    // first null is map data
    saveTabGroup("Report", report_id, null, null, "makeArtefactReportReln();");
}

makeArtefactReportReln() {
    report_id = getLastSavedRecordId(); 
    if (isNull(artefact_id)) {
        Object artefactElement = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Artefact'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+report_id+"\n"+
        "                                                       and relntypeName = 'ArtefactReport')\n"+
        "                             and uuid != "+report_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        artefact_id = artefactElement.get(0);
    }
    saveEntitiesToRel("ArtefactReport", artefact_id, report_id);
}

loadReportAttributes(){
    populateRadioGroup("Report/Report/Published", makeVocab("Published"));
}

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");