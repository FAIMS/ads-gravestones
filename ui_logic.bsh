    
/****** 
 FAIMS Logic Fail generated by Heurist Vsn 3.1.7, Friday 14th of February 2014 10:38:29 AM
 Database: hdb_alice_stonetools   Heurist user:Alice Buhrich
 ******/

User user; // dont touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

showWarning("Thanks for trying this module!", "We have provided this module for Demonstration purposes only. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

/*** control ***/
onEvent("control", "show", "refreshCemeteries()");
onEvent("control", "show", "refreshGraves()");
onEvent("control", "show", "loadCemeteryAttributes()");
onEvent("control", "show", "loadGraveAttributes()");

/*** ArchEnt: Cemetery ***/
onEvent("control/cemetery/CemeteryList", "click", "loadCemetery()");
onEvent("control/cemetery/newCemetery", "click", "newCemetery()");

onEvent("Cemetery/Cemetery_Admin/Update", "delayclick", "saveCemetery()");

// onEvent("Collection/Collection_Location/attachThumbnail_image", "click", "attachPictureTo(\"Collection/Collection_Location/Thumbnail_image\")");
// onEvent("Collection/Collection_Location/Update", "delayclick", "saveCollection()");

onEvent("Cemetery/Cemetery_Graves", "show", "updateAllCemetery()");
onEvent("Cemetery/Cemetery_Graves/newGrave", "click", "newGrave()");
onEvent("Cemetery/Cemetery_Graves/GraveList", "click", "loadGrave()");

String cemetery_id = null;

refreshCemeteries() {
    populateList("control/cemetery/CemeteryList", fetchEntityList("Cemetery"));
}

newCemetery(){
    cememtery_id = null;
    newTabGroup("Cemetery");
}
loadCemetery() {
    cemetery_id = getListItemValue();
    loadCemeteryFrom(cemetery_id);
}
loadCemeteryFrom(entid) {
    cemetery_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Cemetery", entid);    
}

saveCemetery() {
    if (false) { 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(cemetery_id)) {
        entity = fetchArchEnt(cemetery_id);
    }
    // first null is map data
    saveTabGroup("Cemetery", cemetery_id, null, null, "cemetery_id = getLastSavedRecordId();");
}
 
loadCemeteryAttributes() {
    populateCheckBoxGroup("Cemetery/Cemetery_Admin/Denomination", makeVocab("Denomination"));
}

updateAllCemetery(){
    if (!isNull(cemetery_id)){
        gravesInCemetery = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Grave'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+cemetery_id+"\n"+
        "                                                       and relntypeName = 'CemeteryGrave')\n"+
        "                             and uuid != "+cemetery_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateList("Cemetery/Cemetery_Graves/GraveList",  gravesInCemetery);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Cemetery/Cemetery_Graves/GraveList",  empty);

    }
}

/*** ArchEnt: Graves ***/
onEvent("control/grave/GraveList", "click", "loadGrave()");

// onEvent("Artefact/Artefact_Visual_interptretation/attachPhoto", "click", "attachPictureTo(\"Artefact/Artefact_Visual_interptretation/Photo\")");
// onEvent("Artefact/Artefact_Visual_interptretation/attachDrawing", "click", "attachFileTo(\"Artefact/Artefact_Visual_interptretation/Drawing\")");
// onEvent("Artefact/Artefact_Visual_interptretation/viewattached", "click", "viewArchEntAttachedFiles(artefact_id)");

onEvent("Grave/Grave/Update", "delayclick", "saveGrave()");
onEvent("Grave/Monument/Update", "delayclick", "saveGrave()");
onEvent("Grave/Motif/Update", "delayclick", "saveGrave()");
onEvent("Grave/Inscription/Update", "delayclick", "saveGrave()");

onEvent("Grave/Plots", "show", "updateAllGrave()");
onEvent("Grave/Plots/newBurial", "click", "newBurial()");
onEvent("Grave/Plots/BurialList", "click", "loadBurial()");

String grave_id = null;

refreshGraves() {
    populateList("control/grave/GraveList", fetchEntityList("Grave"));
}

newGrave(){
    grave_id = null;
    newTabGroup("Grave");
    saveCemetery();
}

loadGrave() {
    artefact_id = getListItemValue();
    loadGraveFrom(grave_id);
}
loadGraveFrom(entid) {
    grave_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Grave", entid);
}

saveGrave() {
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(grave_id)) {
        entity = fetchArchEnt(grave_id);
    }
    // first null is map data
    saveTabGroup("Grave", grave_id, null, null, "makeCemeteryGraveReln();");  
}

makeCemeteryGraveReln() {
    grave_id = getLastSavedRecordId(); 
    if (isNull(cemetery_id)) {
        cemetery_id = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Cemetery'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+grave_id+"\n"+
        "                                                       and relntypeName = 'CemeteryGrave')\n"+
        "                             and uuid != "+grave_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
    }
    saveEntitiesToRel("CemeteryGrave", cemetery_id, grave_id);
}

loadGraveAttributes(){
    populateCheckBoxGroup("Grave/Monument/Marker_form", makeVocab("Marker form"));
    populateCheckBoxGroup("Grave/Monument/Orientation", makeVocab("Orientation"));
    populateCheckBoxGroup("Grave/Monument/Colour", makeVocab("Colour"));
    populateCheckBoxGroup("Grave/Monument/Material", makeVocab("Material"));
    populateCheckBoxGroup("Grave/Monument/Fence", makeVocab("Fence"));
    populateCheckBoxGroup("Grave/Monument/Lettering", makeVocab("Lettering"));
    populateCheckBoxGroup("Grave/Monument/Footstone", makeVocab("Footstone"));
    populateCheckBoxGroup("Grave/Monument/Other_items", makeVocab("Other items"));
    populateCheckBoxGroup("Grave/Motif/Motif", makeVocab("Motif"));
    populateCheckBoxGroup("Grave/Inscription/Style_of_language", makeVocab("Style of language"));
    populateCheckBoxGroup("Grave/Inscription/Key_words", makeVocab("Key words"));
    populateCheckBoxGroup("Grave/Inscription/Tense", makeVocab("Tense"));
    populateCheckBoxGroup("Grave/Inscription/Burials_described_in_relation_to", makeVocab("Burials described in relation to"));
    populateCheckBoxGroup("Grave/Plots/Plot_type", makeVocab("Plot type"));
}

updateAllArtefact(){
    if (!isNull(grave_id)){
        burialsInGrave= fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Burial'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+grave_id+"\n"+
        "                                                       and relntypeName = 'GraveBurial')\n"+
        "                             and uuid != "+grave_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        populateList("Grave/Plots/BurialList",  burialsInGrave);
    } else {
        Object empty = fetchAll("select '', '';");
        populateList("Grave/Plots/BurialList",  empty);
    }
}      

/*** ArchEnt: Report ***/


// onEvent("control/report/ReportList", "click", "loadReport()");
// onEvent("Report/Report/Update", "delayclick", "saveReport()");

String report_id = null;

refreshReports() {
    populateList("control/report/ReportList", fetchEntityList("Report"));
}

newReport(){
    report_id = null;
    newTabGroup("Report");
    saveArtefact();
}

loadReport() {
    report_id = getListItemValue();
    loadReportFrom(report_id);
}

loadReportFrom(entid) {
    report_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Report", entid);
}

saveReport() {
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(report_id)) {
        entity = fetchArchEnt(report_id);
    }
    // first null is map data
    saveTabGroup("Report", report_id, null, null, "makeArtefactReportReln();");
}

makeArtefactReportReln() {
    report_id = getLastSavedRecordId(); 
    if (isNull(artefact_id)) {
        Object artefactElement = fetchOne("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Artefact'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                     where uuid = "+report_id+"\n"+
        "                                                       and relntypeName = 'ArtefactReport')\n"+
        "                             and uuid != "+report_id+")\n"+
        "        ORDER BY uuid, attributename ASC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;");
        artefact_id = artefactElement.get(0);
    }
    saveEntitiesToRel("ArtefactReport", artefact_id, report_id);
}

loadReportAttributes(){
    populateRadioGroup("Report/Report/Published", makeVocab("Published"));
}

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");